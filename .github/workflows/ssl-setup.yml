name: SSL Certificate Setup

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain name for SSL certificate'
        required: true
        type: string
      email:
        description: 'Email for Let''s Encrypt notifications'
        required: true
        type: string

jobs:
  setup-ssl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
        
    - name: Add EC2 to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Install Certbot and setup SSL
      run: |
        ssh ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          
          echo "üîí Setting up SSL certificate for ${{ github.event.inputs.domain }}"
          
          # Install certbot
          sudo yum install -y certbot python3-certbot-nginx
          
          # Stop nginx if running
          docker-compose -f docker-compose-simple.yml stop nginx || true
          
          # Obtain SSL certificate
          sudo certbot certonly --standalone \
            --email ${{ github.event.inputs.email }} \
            --agree-tos \
            --no-eff-email \
            -d ${{ github.event.inputs.domain }}
          
          # Create SSL directory
          mkdir -p /opt/floripacodegurus/ssl
          
          # Copy certificates
          sudo cp /etc/letsencrypt/live/${{ github.event.inputs.domain }}/fullchain.pem /opt/floripacodegurus/ssl/cert.pem
          sudo cp /etc/letsencrypt/live/${{ github.event.inputs.domain }}/privkey.pem /opt/floripacodegurus/ssl/key.pem
          
          # Set proper permissions
          sudo chown -R ec2-user:ec2-user /opt/floripacodegurus/ssl
          
          echo "‚úÖ SSL certificates installed successfully!"
          
          # Setup auto-renewal
          echo "0 12 * * * /usr/bin/certbot renew --quiet" | sudo crontab -
          
          echo "‚úÖ SSL auto-renewal configured!"
        EOF
        
    - name: Update nginx configuration
      run: |
        ssh ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          
          echo "üîß Updating nginx configuration for HTTPS..."
          
          # Create nginx configuration with SSL
          cat > /opt/floripacodegurus/nginx-ssl.conf << 'NGINX_EOF'
          events {
              worker_connections 1024;
          }

          http {
              include /etc/nginx/mime.types;
              default_type application/octet-stream;

              # Logging
              log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" "$http_x_forwarded_for"';

              access_log /var/log/nginx/access.log main;
              error_log /var/log/nginx/error.log;

              # Basic settings
              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              types_hash_max_size 2048;
              client_max_body_size 20M;

              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_proxied any;
              gzip_comp_level 6;
              gzip_types
                  text/plain
                  text/css
                  text/xml
                  text/javascript
                  application/json
                  application/javascript
                  application/xml+rss
                  application/atom+xml
                  image/svg+xml;

              # Rate limiting
              limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
              limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

              # Upstream Django application
              upstream django {
                  server web:8000;
              }

              # HTTP server (redirect to HTTPS)
              server {
                  listen 80;
                  server_name ${{ github.event.inputs.domain }};
                  return 301 https://$host$request_uri;
              }

              # HTTPS server
              server {
                  listen 443 ssl http2;
                  server_name ${{ github.event.inputs.domain }};

                  # SSL configuration
                  ssl_certificate /etc/nginx/ssl/cert.pem;
                  ssl_certificate_key /etc/nginx/ssl/key.pem;
                  ssl_protocols TLSv1.2 TLSv1.3;
                  ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
                  ssl_prefer_server_ciphers off;

                  # Security headers
                  add_header X-Frame-Options DENY;
                  add_header X-Content-Type-Options nosniff;
                  add_header X-XSS-Protection "1; mode=block";
                  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

                  # Static files
                  location /static/ {
                      alias /app/staticfiles/;
                      expires 1y;
                      add_header Cache-Control "public, immutable";
                  }

                  # Media files
                  location /media/ {
                      alias /app/media/;
                      expires 1y;
                      add_header Cache-Control "public";
                  }

                  # API rate limiting
                  location /api/ {
                      limit_req zone=api burst=20 nodelay;
                      proxy_pass http://django;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  # Login rate limiting
                  location /user/login/ {
                      limit_req zone=login burst=5 nodelay;
                      proxy_pass http://django;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  # Main application
                  location / {
                      proxy_pass http://django;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_redirect off;
                      
                      # Timeout settings
                      proxy_connect_timeout 60s;
                      proxy_send_timeout 60s;
                      proxy_read_timeout 60s;
                  }

                  # Health check endpoint
                  location /health/ {
                      access_log off;
                      return 200 "healthy\n";
                      add_header Content-Type text/plain;
                  }
              }
          }
          NGINX_EOF
          
          echo "‚úÖ Nginx configuration updated for SSL!"
        EOF
        
    - name: Restart services with SSL
      run: |
        ssh ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          
          echo "üîÑ Restarting services with SSL configuration..."
          
          cd /opt/floripacodegurus
          
          # Update docker-compose to use nginx with SSL
          if [ -f "docker-compose-production.yml" ]; then
            docker-compose -f docker-compose-production.yml up -d
          else
            echo "‚ö†Ô∏è Production docker-compose not found, using simple setup"
            docker-compose -f docker-compose-simple.yml up -d
          fi
          
          # Wait for services to start
          sleep 30
          
          # Test HTTPS
          if curl -f https://${{ github.event.inputs.domain }}/ > /dev/null 2>&1; then
            echo "‚úÖ HTTPS is working!"
          else
            echo "‚ö†Ô∏è HTTPS test failed, but HTTP might still work"
          fi
          
          echo "‚úÖ SSL setup completed!"
        EOF
