name: Deploy Django App to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python manage.py test --settings=configs.settings.development
        
    - name: Create deployment package
      run: |
        tar -czf deployment.tar.gz \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='.git' \
          --exclude='*.pyc' \
          --exclude='.env*' \
          --exclude='deployment.tar.gz' \
          --exclude='.github' \
          .
          
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
        
    - name: Add EC2 to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      run: |
        # Upload deployment package
        scp deployment.tar.gz ec2-user@${{ secrets.EC2_HOST }}:/tmp/
        
        # Deploy on EC2
        ssh ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # Navigate to application directory
          cd /opt/floripacodegurus
          
          # Stop current containers
          docker-compose -f docker-compose-simple.yml down || true
          
          # Backup current deployment
          if [ -d "app_backup" ]; then
            rm -rf app_backup
          fi
          if [ -d "app" ]; then
            mv app app_backup
          fi
          
          # Extract new deployment
          mkdir -p app
          cd app
          tar -xzf /tmp/deployment.tar.gz
          
          # Copy environment file
          cp ../.env.production .env.production || echo "No .env.production found"
          
          # Move back to application directory
          cd ..
          
          # Copy new files
          cp -r app/* .
          rm -rf app
          
          # Set permissions
          chmod +x docker-entrypoint-simple.sh
          
          # Build and start containers
          docker-compose -f docker-compose-simple.yml build --no-cache web
          docker-compose -f docker-compose-simple.yml up -d
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to start..."
          sleep 60
          
          # Check container status
          echo "üìä Container status:"
          docker-compose -f docker-compose-simple.yml ps
          
          # Wait for web container to be stable
          echo "üîÑ Waiting for web container to stabilize..."
          for i in {1..10}; do
            if docker-compose -f docker-compose-simple.yml ps | grep -q "web.*Up"; then
              echo "‚úÖ Web container is running"
              break
            else
              echo "‚è≥ Web container not ready, attempt $i/10..."
              sleep 10
            fi
          done
          
          # Check web container logs
          echo "üìã Web container logs:"
          docker-compose -f docker-compose-simple.yml logs web --tail=20
          
          # Run migrations (with retry)
          echo "üîÑ Running database migrations..."
          for i in {1..3}; do
            if docker-compose -f docker-compose-simple.yml exec -T web python manage.py migrate; then
              echo "‚úÖ Migrations completed"
              break
            else
              echo "‚è≥ Migration attempt $i/3 failed, retrying..."
              sleep 10
            fi
          done
          
          # Collect static files (with retry)
          echo "üì¶ Collecting static files..."
          for i in {1..3}; do
            if docker-compose -f docker-compose-simple.yml exec -T web python manage.py collectstatic --noinput; then
              echo "‚úÖ Static files collected"
              break
            else
              echo "‚è≥ Static files collection attempt $i/3 failed, retrying..."
              sleep 10
            fi
          done
          
          # Health check with retry
          echo "üè• Performing health check..."
          for i in {1..5}; do
            if curl -f http://localhost:8000/ > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚è≥ Health check attempt $i/5 failed, retrying..."
              sleep 15
            fi
          done
          
          # Final health check
          if curl -f http://localhost:8000/ > /dev/null 2>&1; then
            echo "‚úÖ Deployment successful!"
            # Clean up backup if deployment is successful
            rm -rf app_backup
          else
            echo "‚ùå Deployment failed, rolling back..."
            if [ -d "app_backup" ]; then
              rm -rf app
              mv app_backup app
              cp -r app/* .
              docker-compose -f docker-compose-simple.yml up -d
            fi
            exit 1
          fi
          
          # Clean up
          rm -f /tmp/deployment.tar.gz
        EOF
        
    - name: Health Check
      run: |
        echo "üè• Performing external health check..."
        sleep 30
        
        # Retry health check multiple times
        for i in {1..5}; do
          echo "‚è≥ Health check attempt $i/5..."
          if curl -f http://${{ secrets.EC2_HOST }}:8000/ > /dev/null 2>&1; then
            echo "‚úÖ External health check passed!"
            exit 0
          else
            echo "‚è≥ Health check attempt $i/5 failed, retrying in 15 seconds..."
            sleep 15
          fi
        done
        
        echo "‚ùå External health check failed after 5 attempts"
        exit 1
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê Application is available at: http://${{ secrets.EC2_HOST }}:8000"
        else
          echo "‚ùå Deployment failed!"
        fi